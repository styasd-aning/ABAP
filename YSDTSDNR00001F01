*&---------------------------------------------------------------------*
*& Include          YSDTSDNR00001F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form f_get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_get_data .


  DATA:
    t_awkey TYPE TABLE OF ty_awkey,
    x_awkey TYPE ty_awkey
    .

  "Query all the needed data into different internal tables depending on source database table
  SELECT
     bukrs,
     vbeln,
     vbtyp,
     kunag,
     fkdat
     FROM vbrk
     INTO TABLE @DATA(t_vbrk)
     WHERE
     bukrs IN @s_bukrs
     AND vbeln IN @s_vbeln.

  IF t_vbrk[] IS NOT INITIAL.

    SELECT
      bukrs,
      butxt,
      adrnr
      FROM t001
      INTO TABLE @DATA(t_t001)
      FOR ALL ENTRIES IN @t_vbrk
      WHERE bukrs = @t_vbrk-bukrs.

    IF t_t001[] IS NOT INITIAL.
      " Get Customer Address Detail by T001 from ADRC
      SELECT
        addrnumber, " address number
        street      " street
        FROM adrc
        FOR ALL ENTRIES IN @t_t001
        WHERE addrnumber = @t_t001-adrnr
        INTO TABLE @DATA(t_adrc).
    ENDIF.

    SELECT
      kunnr,
      name1,
      adrnr
      FROM kna1
      INTO TABLE @DATA(t_kna1)
      FOR ALL ENTRIES IN @t_vbrk
      WHERE kunnr = @t_vbrk-kunag
      AND kunnr IN @s_kunnr.

    SELECT
      vbeln,
      vbelv
      FROM vbfa
      INTO TABLE @DATA(t_vbfa)
      FOR ALL ENTRIES IN @t_vbrk
      WHERE vbeln = @t_vbrk-vbeln
      AND vbtyp_v = 'J'.

    SELECT
      vbeln,
      zfbdt,
      zbd1t
      FROM bseg
      INTO TABLE @DATA(t_bseg)
      FOR ALL ENTRIES IN @t_vbrk
      WHERE vbeln = @t_vbrk-vbeln.

    SELECT
      vbeln,
      arktx,
      fkimg,
      vrkme
      FROM vbrp
      INTO TABLE @DATA(t_vbrp)
      FOR ALL ENTRIES IN @t_vbrk
      WHERE vbeln = @t_vbrk-vbeln.

    " convert selected vbeln to awkey
    LOOP AT t_vbrk INTO DATA(x_awkeys).
      x_awkey-awkey = x_awkeys-vbeln.
      APPEND x_awkey TO t_awkey.
    ENDLOOP.

    " use converted awkey to look for belnr
    SELECT
      bukrs,
      belnr,
      awkey,
      awtyp
      FROM bkpf
      INTO TABLE @DATA(t_bkpf)
      FOR ALL ENTRIES IN @t_awkey
      WHERE awkey = @t_awkey-awkey
      AND awtyp = 'VBRK'.

" use belnr to look for netwr, brtwr, and mwsbk
    IF t_bkpf[] IS NOT INITIAL.
      SELECT
        netwr,
        brtwr,
        mwsbk,
        waerl,
        wbeln
        FROM wbrk
        FOR ALL ENTRIES IN @t_bkpf
        WHERE wbeln = @t_bkpf-belnr
        INTO TABLE @DATA(t_wbrk).
    ENDIF.

  ENDIF.

  "Sort all the internal tables to prepare for binary search
  SORT t_vbrk BY bukrs vbeln.
  SORT t_t001 BY bukrs.
  SORT t_bkpf BY bukrs.
  SORT t_wbrk BY wbeln.
  SORT t_vbrp BY vbeln.
  SORT t_vbfa BY vbeln.
  SORT t_bseg BY vbeln.
  SORT t_kna1 BY kunnr.

  "Populate internal tables t_header and t_item based on entries of t_vbrk
  LOOP AT t_vbrk INTO DATA(x_vbrk).
    CLEAR: x_in, x_header.

    x_header-bukrs = x_vbrk-bukrs.
    x_header-vbtyp = x_vbrk-vbtyp.
    x_header-kunag = x_vbrk-kunag.


    "1: Organization Address
    READ TABLE t_t001 INTO DATA(x_t001) WITH KEY bukrs = x_vbrk-bukrs BINARY SEARCH.
    CASE sy-subrc.
      WHEN 0.
        x_header-butxt = x_t001-butxt.
      WHEN OTHERS.
        x_header-butxt = 'Placeholder Corp'.
    ENDCASE.

    "2: Organization Address
    READ TABLE t_adrc WITH KEY addrnumber = x_t001-adrnr INTO DATA(x_adrc) .
    CASE sy-subrc.
      WHEN 0.
        x_header-street = x_adrc-street.
      WHEN OTHERS.
        x_header-street = 'Placeholder Address'.
    ENDCASE.

    "3: Form Title
    CASE x_header-vbtyp.
      WHEN 'M' OR '5'.
        x_header-title = 'Invoice'.
      WHEN 'U'.
        x_header-title = 'Pro-Forma Invoice'.
      WHEN 'O'.
        x_header-title = 'Invoice Return'.
      WHEN 'P'.
        x_header-title = 'Debit Note'.
      WHEN OTHERS.
        x_header-title = 'Billing Document'.
    ENDCASE.

    "4: Billing Number
    x_header-vbeln = x_vbrk-vbeln.

    "5: DO Number(s) ;
    READ TABLE t_vbfa TRANSPORTING NO FIELDS WITH KEY vbeln = x_vbrk-vbeln BINARY SEARCH.
    CASE sy-subrc.
      WHEN 0.
        LOOP AT t_vbfa INTO DATA(x_vbfa) WHERE vbeln = x_vbrk-vbeln.
          IF x_header-vbelv_tot IS INITIAL.
            x_header-vbelv_tot = x_vbfa-vbelv.
          ELSE.
            x_header-vbelv_tot = | { x_header-vbelv_tot }, { x_vbfa-vbelv } |.
          ENDIF.
        ENDLOOP.
      WHEN OTHERS.
        x_header-vbelv = 'N/A'.
    ENDCASE.


    "6: Customer Name and Address Number
    READ TABLE t_kna1 INTO DATA(x_kna1) WITH KEY kunnr = x_vbrk-kunag BINARY SEARCH.
    CASE sy-subrc.
      WHEN 0.
        x_header-name1 = x_kna1-name1.
        x_header-kunnr = x_kna1-kunnr.
        x_header-adrnr = x_kna1-adrnr.
      WHEN OTHERS.
        x_header-name1 = 'Customer'.
        x_header-kunnr = 'N/A'.
        x_header-adrnr = 'N/A'.
    ENDCASE.

    "7: Customer Address
    IF x_header-adrnr IS NOT INITIAL.
      CALL FUNCTION 'ADDRESS_INTO_PRINTFORM'
        EXPORTING
          address_number                 = x_header-adrnr
          number_of_lines                = 4
          address_type                   = '1'
        IMPORTING
          address_printform              = x_header-adr_str
        EXCEPTIONS
          address_blocked                = 1
          person_blocked                 = 2
          contact_person_blocked         = 3
          addr_to_be_formated_is_blocked = 4
          OTHERS                         = 5.
      IF sy-subrc <> 0.
        x_header-adr_str = 'N/A'.
      ENDIF.
    ENDIF.

    "8: Billing Date
    x_header-fkdat = x_vbrk-fkdat.

    READ TABLE t_bseg INTO DATA(x_bseg) WITH KEY vbeln = x_vbrk-vbeln BINARY SEARCH.
    CASE sy-subrc.
      WHEN 0.
        x_header-zfbdt = x_bseg-zfbdt.
        x_header-zbd1t = x_bseg-zbd1t.
      WHEN OTHERS.
        x_header-zfbdt = 'N/A'.
        x_header-zbd1t = 0.
    ENDCASE.

    "9: Due Date
    x_header-due_date = x_header-zfbdt + x_header-zbd1t.

    "populate t_header
    APPEND x_header TO t_header.

    "10: Item Desc. ;
    "11: Item Desc. ;
    "[!] parallel cursor encompasses everthing from here until wbrk-mwsbk
    READ TABLE t_vbrp TRANSPORTING NO FIELDS WITH KEY vbeln = x_vbrk-vbeln BINARY SEARCH.
    CASE sy-subrc.
      WHEN 0.
*        LOOP AT t_vbrp INTO DATA(x_vbrp) WHERE vbeln = x_vbrk-vbeln.
        LOOP AT t_vbrp INTO DATA(x_vbrp) FROM sy-tabix.
          CLEAR x_item.
          x_item-vbeln = x_vbrp-vbeln.
          x_item-arktx = x_vbrp-arktx. "10
          x_item-fkimg = x_vbrp-fkimg. "11
          x_item-vrkme = x_vbrp-vrkme.

          "[!!!]
          READ TABLE t_bkpf INTO DATA(x_bkpf) WITH KEY bukrs = x_vbrk-bukrs BINARY SEARCH.
          CASE sy-subrc.
            WHEN 0.
              x_item-belnr = x_bkpf-belnr.
            WHEN OTHERS.
              x_item-belnr = 'N/A'.
          ENDCASE.


          "12: DPP
          "14: DPP+PPN
          "[!] 19, 20: MWSBK ;
          READ TABLE t_wbrk INTO DATA(x_wbrk) WITH KEY wbeln = x_bkpf-belnr BINARY SEARCH.
          CASE sy-subrc.
            WHEN 0.
              x_item-netwr = x_wbrk-netwr. "12
              x_item-brtwr = x_wbrk-brtwr. "14
              x_item-mwsbk = x_wbrk-mwsbk. "19
              x_item-waerl = x_wbrk-waerl.
            WHEN OTHERS.
              x_item-netwr = 0.
              x_item-brtwr = 0.
              x_item-mwsbk = 0.
              x_item-waerl = 'N/A'.
          ENDCASE.
          x_item-total += x_wbrk-brtwr. "15
          x_item-sub_tot += x_wbrk-netwr. "16
          x_item-ppn += x_wbrk-mwsbk. "19, 20

          CALL FUNCTION 'SPELL_AMOUNT'
            EXPORTING
              amount    = x_item-total
              currency  = x_item-waerl
*             FILLER    = ' '
              language  = sy-langu
            IMPORTING
              in_words  = x_item-terbilang "21
            EXCEPTIONS
              not_found = 1
              too_large = 2
              OTHERS    = 3.
          IF sy-subrc <> 0.
            x_item-terbilang = 'NULL'.
          ENDIF.

          "populate t_item
          APPEND x_item TO t_item.

          "Populate t_in with data from x_header and x_item
          APPEND VALUE #(
        bukrs      = x_header-bukrs    "Company Code
        vbeln      = x_header-vbeln    "Billing Number
        butxt      = x_header-butxt    "Company Name
        adrnr      = x_header-adrnr    "Address Number
        addrnumber = x_header-addrnumber
        street     = x_header-street
        vbtyp      = x_header-vbtyp    "Doc Category
        title      = x_header-title    "SF title
        vbelv_tot  = x_header-vbelv_tot"DO Number
        kunag      = x_header-kunag    "Sold-To Party
        kunnr      = x_header-kunnr    "Customer number
        name1      = x_header-name1    "Customer name
        adr_str    = x_header-adr_str  "Customer Address (struct with lines0...4)
        fkdat      = x_header-fkdat    "Billing Date
        due_date   = x_header-due_date "Billing Due
        arktx      = x_item-arktx      "Item Desc
        fkimg      = x_item-fkimg      "Billed Qty
        belnr      = x_item-belnr      "Doc Number
        netwr      = x_item-netwr      "Net Settlement Amount in Document Currency
        brtwr      = x_item-brtwr      "Gross Settlement Amount in Document Currency
        mwsbk      = x_item-mwsbk      "Tax Amount in Document Currency
        sub_tot    = x_item-sub_tot
        total      = x_item-total
        ppn        = x_item-ppn
        vrkme      = x_item-vrkme
        waerl      = x_item-waerl
        terbilang  = x_item-terbilang  "Amount in Words (struct with words, dg0..9)
        ) TO t_in.
        ENDLOOP.
      WHEN OTHERS.
        x_item-arktx = 'N/A'.
        x_item-fkimg = 0.
        x_item-belnr = 'N/A'.
        x_item-netwr = 0.
        x_item-brtwr = 0.
        x_item-mwsbk = 0.
    ENDCASE.
  ENDLOOP.

ENDFORM.
